{"version":3,"sources":["components/CopyToClipboardText/index.js","constants/Nationality.js","pages/Contacts/ContactsTable/index.js","pages/Contacts/constants.js","pages/Contacts/ToggleDataViewMode/index.js","pages/Contacts/useDataViewMode.js","pages/Contacts/ContactsFilters/index.js","pages/Contacts/index.js","pages/Contacts/useContacts.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","cursor","icon","marginRight","spacing","STATUS_COPY","TITLE_BY_STATUS","CopyToClipboardText","text","classes","useCopyToClipboard","copyToClipboard","useState","statusCopy","setStatusCopy","onClickCopy","useCallback","onClickAway","ClickAwayListener","Tooltip","title","placement","arrow","className","onClick","fontSize","NATIONALITY","NATIONALITY_HUMAN_NAME","table","ContactsTable","data","TableContainer","component","Paper","data-testid","Table","aria-label","TableHead","TableRow","TableCell","TableBody","map","contact","scope","Avatar","src","picture","thumbnail","alt","name","first","last","Typography","format","parseISO","dob","date","age","email","phone","location","country","city","street","number","nat","login","uuid","DATA_VIEW_MODES","ToggleDataViewMode","dataViewMode","setDataViewMode","handleChangeViewMode","_","nextView","ToggleButtonGroup","value","exclusive","onChange","ToggleButton","getInitialDAtaViewMode","localStorage","getItem","fieldsContainer","fieldGender","minWidth","fieldNationality","ContactsFilters","filters","updateFilter","clearFilters","handleChangeFilter","event","target","Box","display","justifyContent","TextField","label","variant","fullname","FormControl","InputLabel","id","Select","lebelId","gender","MenuItem","nationality","Object","entries","key","Button","size","startIcon","marginTop","headContainer","marginBottom","filtersContainer","FiltersDefaultValue","Contacts","contacts","setData","isLoading","setIsLoading","isError","setIsError","useEffect","a","fetch","response","json","results","error","Error","getContacts","useContacts","setItem","useDataViewMode","setFilters","filteredContacts","filter","toLowerCase","includes","filterByFullname","Container","Grid","container","item","xs","prevFilters","CircularProgress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d6c1968.chunk.js","sourcesContent":["import { useCallback, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport { useCopyToClipboard } from \"react-use\";\r\nimport Button from \"@material-ui/core/Box\";\r\nimport FileCopyOutlinedIcon from \"@material-ui/icons/FileCopyOutlined\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      cursor: \"pointer\",\r\n    },\r\n    icon: {\r\n      marginRight: theme.spacing(1),\r\n    },\r\n  })\r\n);\r\n\r\nconst STATUS_COPY = {\r\n  COPY: \"copy\",\r\n  COPIED: \"copied\",\r\n};\r\n\r\nconst TITLE_BY_STATUS = {\r\n  [STATUS_COPY.COPY]: \"Copy\",\r\n  [STATUS_COPY.COPIED]: \"Copied\",\r\n};\r\n\r\nexport const CopyToClipboardText = ({ text }) => {\r\n  const classes = useStyles();\r\n  const [, copyToClipboard] = useCopyToClipboard();\r\n  const [statusCopy, setStatusCopy] = useState(STATUS_COPY.COPY);\r\n\r\n  const onClickCopy = useCallback(() => {\r\n    copyToClipboard(text);\r\n    setStatusCopy(STATUS_COPY.COPIED);\r\n  }, [copyToClipboard, text]);\r\n\r\n  const onClickAway = useCallback(() => {\r\n    setStatusCopy(STATUS_COPY.COPY);\r\n  }, [setStatusCopy]);\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={onClickAway}>\r\n      <Tooltip title={TITLE_BY_STATUS[statusCopy]} placement=\"top\" arrow>\r\n        <Button className={classes.root} onClick={onClickCopy}>\r\n          <FileCopyOutlinedIcon fontSize=\"small\" className={classes.icon} />\r\n          {text}\r\n        </Button>\r\n      </Tooltip>\r\n    </ClickAwayListener>\r\n  );\r\n};\r\n\r\nCopyToClipboardText.propTypes = {\r\n  text: PropTypes.string.isRequired,\r\n};\r\n","export const NATIONALITY = {\r\n  AU: \"AU\",\r\n  BR: \"BR\",\r\n  CA: \"CA\",\r\n  CH: \"CH\",\r\n  DE: \"DE\",\r\n  DK: \"DK\",\r\n  ES: \"ES\",\r\n  FI: \"FI\",\r\n  FR: \"FR\",\r\n  GB: \"GB\",\r\n  IE: \"IE\",\r\n  IR: \"IR\",\r\n  NO: \"NO\",\r\n  NL: \"NL\",\r\n  NZ: \"NZ\",\r\n  TR: \"TR\",\r\n  US: \"US\",\r\n};\r\n\r\nexport const NATIONALITY_HUMAN_NAME = {\r\n  [NATIONALITY.AU]: \"Australian\",\r\n  [NATIONALITY.BR]: \"Brazilian\",\r\n  [NATIONALITY.CA]: \"Canadian\",\r\n  [NATIONALITY.CH]: \"Chinese\",\r\n  [NATIONALITY.DE]: \"German\",\r\n  [NATIONALITY.DK]: \"Danish\",\r\n  [NATIONALITY.ES]: \"Spanish\",\r\n  [NATIONALITY.FI]: \"Finnish\",\r\n  [NATIONALITY.FR]: \"French\",\r\n  [NATIONALITY.GB]: \"British\",\r\n  [NATIONALITY.IE]: \"Irish\",\r\n  [NATIONALITY.IR]: \"Iranian\",\r\n  [NATIONALITY.NO]: \"Norwegian\",\r\n  [NATIONALITY.NL]: \"Dutch\",\r\n  [NATIONALITY.NZ]: \"New Zeland\",\r\n  [NATIONALITY.TR]: \"Turkish\",\r\n  [NATIONALITY.US]: \"American\",\r\n};\r\n","import format from \"date-fns/format\";\r\nimport parseISO from \"date-fns/parseISO\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { CopyToClipboardText } from \"../../../components/CopyToClipboardText\";\r\nimport { NATIONALITY_HUMAN_NAME } from \"../../../constants/Nationality\";\r\n\r\nconst useStyles = makeStyles({\r\n  table: {},\r\n});\r\n\r\nexport const ContactsTable = ({ data }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper} data-testid=\"contacts-table-container\">\r\n      <Table className={classes.table} aria-label=\"contacts table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Avatar</TableCell>\r\n            <TableCell>Full name</TableCell>\r\n            <TableCell>Birthday</TableCell>\r\n            <TableCell>Email</TableCell>\r\n            <TableCell>Phone</TableCell>\r\n            <TableCell>Location</TableCell>\r\n            <TableCell>Nationality</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {data.map((contact) => (\r\n            <TableRow key={contact.login.uuid}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                <Avatar src={contact.picture.thumbnail} alt=\"Avatar\" />\r\n              </TableCell>\r\n              <TableCell>\r\n                {contact.name.title}. {contact.name.first} {contact.name.last}\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography>\r\n                  {format(parseISO(contact.dob.date), \"iiii, Pp\")}\r\n                </Typography>\r\n                <Typography>{contact.dob.age} years </Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardText text={contact.email} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <CopyToClipboardText text={contact.phone} />\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography>{contact.location.country}</Typography>\r\n                <Typography>\r\n                  {contact.location.city}, {contact.location.street.name}{\" \"}\r\n                  {contact.location.street.number}\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell>{NATIONALITY_HUMAN_NAME[contact.nat]}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n","export const DATA_VIEW_MODES = {\r\n  TABLE: \"table\",\r\n  GRID: \"grid\",\r\n};\r\n","import { useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\r\nimport ViewModuleIcon from \"@material-ui/icons/ViewModule\";\r\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\r\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\r\nimport { DATA_VIEW_MODES } from \"../constants\";\r\n\r\nexport const ToggleDataViewMode = ({ dataViewMode, setDataViewMode }) => {\r\n  const handleChangeViewMode = useCallback(\r\n    (_, nextView) => {\r\n      setDataViewMode(nextView);\r\n      //localStorage.setItem(\"dataViewMode\", nextView);  // Сохранение варианта отображения страницы в локальном хранилище с точки зрения тестирования, предпочтительно производить используя useEffect.\r\n    },\r\n    [setDataViewMode]\r\n  );\r\n\r\n  return (\r\n    <ToggleButtonGroup\r\n      value={dataViewMode}\r\n      exclusive\r\n      onChange={handleChangeViewMode}\r\n    >\r\n      <ToggleButton\r\n        value={DATA_VIEW_MODES.GRID}\r\n        aria-label={DATA_VIEW_MODES.GRID}\r\n        data-testid=\"toggle-data-view-mode-grid\"\r\n      >\r\n        <ViewModuleIcon />\r\n      </ToggleButton>\r\n      <ToggleButton\r\n        value={DATA_VIEW_MODES.TABLE}\r\n        aria-label={DATA_VIEW_MODES.TABLE}\r\n        data-testid=\"toggle-data-view-mode-table\"\r\n      >\r\n        <ViewListIcon />\r\n      </ToggleButton>\r\n    </ToggleButtonGroup>\r\n  );\r\n};\r\n\r\nToggleDataViewMode.propTypes = {\r\n  dataViewMode: PropTypes.oneOf([DATA_VIEW_MODES.TABLE, DATA_VIEW_MODES.GRID])\r\n    .isRequired,\r\n  setDataViewMode: PropTypes.func.isRequired,\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { DATA_VIEW_MODES } from \"./constants\";\r\n\r\nconst getInitialDAtaViewMode = () => {\r\n  return localStorage.getItem(\"dataViewMode\") || DATA_VIEW_MODES.TABLE;\r\n};\r\n\r\nexport const useDataViewMode = () => {\r\n  const [dataViewMode, setDataViewMode] = useState(getInitialDAtaViewMode);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"dataViewMode\", dataViewMode);\r\n  }, [dataViewMode]);\r\n\r\n  return [dataViewMode, setDataViewMode];\r\n};\r\n","import PropTypes from \"prop-types\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport Button from \"@material-ui/core/Button\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport { NATIONALITY_HUMAN_NAME } from \"../../../constants/Nationality\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    fieldsContainer: {\n      \"& > *:not(:last-child)\": {\n        marginRight: theme.spacing(2),\n      },\n    },\n    fieldGender: {\n      minWidth: 120,\n    },\n    fieldNationality: {\n      minWidth: 140,\n    },\n  })\n);\n\nexport const ContactsFilters = ({ filters, updateFilter, clearFilters }) => {\n  const classes = useStyles();\n\n  const handleChangeFilter = (event) => {\n    updateFilter(event.target.name, event.target.value);\n  };\n\n  return (\n    <Box display=\"flex\" justifyContent=\"space-between\">\n      <Box display=\"flex\" className={classes.fieldsContainer}>\n        <TextField\n          name=\"fullname\"\n          label=\"Fullname\"\n          variant=\"outlined\"\n          value={filters.fullname}\n          onChange={handleChangeFilter}\n        />\n        <FormControl variant=\"outlined\" className={classes.fieldGender}>\n          <InputLabel id=\"gender\">Gender</InputLabel>\n          <Select\n            lebelId=\"gender\"\n            name=\"gender\"\n            label=\"Gender\"\n            value={filters.gender}\n            onChange={handleChangeFilter}\n          >\n            <MenuItem value=\"all\">All</MenuItem>\n            <MenuItem value=\"male\">Male</MenuItem>\n            <MenuItem value=\"female\">Female</MenuItem>\n          </Select>\n        </FormControl>\n        <FormControl variant=\"outlined\" className={classes.fieldNationality}>\n          <InputLabel id=\"nationality\">Nationality</InputLabel>\n          <Select\n            lebelId=\"nationality\"\n            name=\"nationality\"\n            label=\"Nationality\"\n            value={filters.nationality}\n            onChange={handleChangeFilter}\n          >\n            <MenuItem value=\"all\">All</MenuItem>\n            {Object.entries(NATIONALITY_HUMAN_NAME).map(([key, name]) => (\n              <MenuItem value={key} key={key}>\n                {name}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Box>\n      <Button size=\"small\" startIcon={<ClearIcon />} onClick={clearFilters}>\n        Clear\n      </Button>\n    </Box>\n  );\n};\n\nContactsFilters.propTypes = {\n  filters: PropTypes.object.isRequired,\n  updateFilters: PropTypes.func.isRequired,\n  clearFilters: PropTypes.func.isRequired,\n};\n","import { useState } from \"react\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport { ContactsTable } from \"./ContactsTable\";\nimport { ToggleDataViewMode } from \"./ToggleDataViewMode\";\nimport { useContacts } from \"./useContacts\";\nimport { useDataViewMode } from \"./useDataViewMode\";\nimport { DATA_VIEW_MODES } from \"./constants\";\nimport { ContactsFilters } from \"./ContactsFilters\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      marginTop: theme.spacing(4),\n    },\n    headContainer: {\n      marginBottom: theme.spacing(3),\n    },\n    filtersContainer: {\n      marginBottom: theme.spacing(3),\n    },\n  })\n);\n\nconst FiltersDefaultValue = {\n  fullname: \"\",\n  gender: \"all\",\n  nationality: \"all\",\n};\n\nconst filterByFullname = ({ first = \"\", last }, fullname) =>\n  first.toLowerCase().includes(fullname.toLowerCase()) ||\n  last.toLowerCase().includes(fullname.toLowerCase());\n\nconst filterByGender = (value, gender) => {\n  if (gender === \"all\") {\n    return true;\n  }\n  return value === gender;\n};\n\nconst filterByNationality = (value, nationality) => {\n  if (nationality === \"all\") {\n    return true;\n  }\n  return value === nationality;\n};\n\nexport const Contacts = () => {\n  const classes = useStyles();\n  const contacts = useContacts();\n  const [dataViewMode, setDataViewMode] = useDataViewMode();\n  const [filters, setFilters] = useState(FiltersDefaultValue);\n\n  const updateFilter = (name, value) => {\n    setFilters((prevFilters) => ({\n      ...prevFilters,\n      [name]: value,\n    }));\n  };\n\n  const clearFilters = () => {\n    setFilters(FiltersDefaultValue);\n  };\n\n  const filteredContacts = contacts.data\n    .filter((contact) => filterByFullname(contact.name, filters.fullname))\n    .filter((contact) => filterByGender(contact.gender, filters.gender))\n    .filter((contact) => filterByNationality(contact.nat, filters.nationality));\n\n  return (\n    <Container className={classes.root}>\n      <Grid container>\n        <Grid item xs={12} className={classes.headContainer}>\n          <Box display=\"flex\" justifyContent=\"space-between\">\n            <Typography variant=\"h4\" component=\"h1\">\n              Contacts\n            </Typography>\n            <ToggleDataViewMode\n              dataViewMode={dataViewMode}\n              setDataViewMode={setDataViewMode}\n            />\n          </Box>\n        </Grid>\n        <Grid item xs={12} className={classes.filtersContainer}>\n          <ContactsFilters\n            filters={filters}\n            updateFilter={updateFilter}\n            clearFilters={clearFilters}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          {(() => {\n            if (contacts.isLoading) {\n              return <CircularProgress data-testid=\"contacts-loader\" />;\n            }\n\n            if (contacts.isError) {\n              return <div data-testid=\"contacts-error\">...error</div>;\n            }\n\n            if (dataViewMode === DATA_VIEW_MODES.TABLE) {\n              return <ContactsTable data={filteredContacts} />;\n            }\n\n            if (dataViewMode === DATA_VIEW_MODES.GRID) {\n              return <div data-testid=\"contacts-grid-container\">gird</div>;\n            }\n\n            return null;\n          })()}\n        </Grid>\n      </Grid>\n    </Container>\n  );\n};\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useContacts = () => {\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isError, setIsError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getContacts = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        const response = await fetch(\"https://randomuser.me/api/?results=10\");\r\n        const { results, error } = await response.json();\r\n        if (error) {\r\n          throw new Error(error);\r\n        }\r\n        setData(results);\r\n        setIsError(false);\r\n      } catch (e) {\r\n        setIsError(true);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    getContacts();\r\n  }, []);\r\n\r\n  return {\r\n    data,\r\n    isLoading,\r\n    isError,\r\n  };\r\n};\r\n","import { Contacts } from \"./pages/Contacts\";\r\n\r\nexport function App() {\r\n  return (\r\n    <div>\r\n      <Contacts />\r\n    </div>\r\n  );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}